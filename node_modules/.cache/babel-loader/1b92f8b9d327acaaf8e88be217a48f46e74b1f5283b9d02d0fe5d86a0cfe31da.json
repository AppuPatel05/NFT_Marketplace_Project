{"ast":null,"code":"var _jsxFileName = \"/home/oc/Desktop/NFT Marketplace/NFT_MARKETPLACE_ALCHEMY/RTW3-Week7-NFT-Marketplace/src/components/test.js\";\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function asb() {\n  // const ethers = require(\"ethers\");\n  // //After adding your Hardhat network to your metamask, this code will get providers and signers\n  // const provider = new ethers.providers.Web3Provider(window.ethereum);\n  // const signer = provider.getSigner();\n  // const addr = await signer.getAddress();\n  // console.log(\"add:\"+addr);   \n  // console.log(\"fff\");\n\n  console.log(\"hello\");\n  const ethers = require(\"ethers\");\n  //After adding your Hardhat network to your metamask, this code will get providers and signers\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  //Pull the deployed contract instance\n  let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer);\n  let transaction = await contract.getAllNFTs();\n  const items = await Promise.all(transaction.map(async i => {\n    console.log(i.tokenId);\n    const tokenURI = await contract.tokenURI(i.tokenId);\n    console.log(tokenURI);\n    let meta = await axios.get(tokenURI);\n    meta = meta.data;\n    let price = ethers.utils.formatUnits(i.price.toString(), \"ether\");\n    let item = {\n      price,\n      tokenId: i.tokenId.toNumber(),\n      seller: i.seller,\n      owner: i.owner,\n      image: meta.image,\n      name: meta.name,\n      description: meta.description\n    };\n    return item;\n  }));\n}\nasb();\nexport default function Test(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      \"minHeight\": \"100vh\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_c = Test;\nvar _c;\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"names":["MarketplaceJSON","axios","jsxDEV","_jsxDEV","asb","console","log","ethers","require","provider","providers","Web3Provider","window","ethereum","signer","getSigner","contract","Contract","address","abi","transaction","getAllNFTs","items","Promise","all","map","i","tokenId","tokenURI","meta","get","data","price","utils","formatUnits","toString","item","toNumber","seller","owner","image","name","description","Test","props","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/oc/Desktop/NFT Marketplace/NFT_MARKETPLACE_ALCHEMY/RTW3-Week7-NFT-Marketplace/src/components/test.js"],"sourcesContent":["import MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nasync function asb(){\n    // const ethers = require(\"ethers\");\n    // //After adding your Hardhat network to your metamask, this code will get providers and signers\n    // const provider = new ethers.providers.Web3Provider(window.ethereum);\n    // const signer = provider.getSigner();\n    // const addr = await signer.getAddress();\n    // console.log(\"add:\"+addr);   \n    // console.log(\"fff\");\n\n    console.log(\"hello\");\n    const ethers = require(\"ethers\");\n    //After adding your Hardhat network to your metamask, this code will get providers and signers\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    //Pull the deployed contract instance\n    let contract = new ethers.Contract(\n      MarketplaceJSON.address,\n      MarketplaceJSON.abi,\n      signer\n    );\n\n    let transaction = await contract.getAllNFTs();\n    \n    const items = await Promise.all(\n        transaction.map(async (i) => {\n            console.log(i.tokenId);\n        \n          const tokenURI = await contract.tokenURI(i.tokenId);\n          console.log(tokenURI);\n          let meta = await axios.get(tokenURI);\n          meta = meta.data;\n  \n          let price = ethers.utils.formatUnits(i.price.toString(), \"ether\");\n          let item = {\n            price,\n            tokenId: i.tokenId.toNumber(),\n            seller: i.seller,\n            owner: i.owner,\n            image: meta.image,\n            name: meta.name,\n            description: meta.description,\n          };\n          return item;\n        })\n      );\n\n\n\n\n\n\n\n}\n\nasb();\nexport default function Test (props) {\nreturn(\n    <div style={{\"minHeight\":\"100vh\"}}>\n    </div>\n)\n}"],"mappings":";AAAA,OAAOA,eAAe,MAAM,qBAAqB;AACjD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC1B,eAAeC,GAAGA,CAAA,EAAE;EAChB;EACA;EACA;EACA;EACA;EACA;EACA;;EAEAC,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;EACpB,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;EAChC;EACA,MAAMC,QAAQ,GAAG,IAAIF,MAAM,CAACG,SAAS,CAACC,YAAY,CAACC,MAAM,CAACC,QAAQ,CAAC;EACnE,MAAMC,MAAM,GAAGL,QAAQ,CAACM,SAAS,EAAE;EACnC;EACA,IAAIC,QAAQ,GAAG,IAAIT,MAAM,CAACU,QAAQ,CAChCjB,eAAe,CAACkB,OAAO,EACvBlB,eAAe,CAACmB,GAAG,EACnBL,MAAM,CACP;EAED,IAAIM,WAAW,GAAG,MAAMJ,QAAQ,CAACK,UAAU,EAAE;EAE7C,MAAMC,KAAK,GAAG,MAAMC,OAAO,CAACC,GAAG,CAC3BJ,WAAW,CAACK,GAAG,CAAC,MAAOC,CAAC,IAAK;IACzBrB,OAAO,CAACC,GAAG,CAACoB,CAAC,CAACC,OAAO,CAAC;IAExB,MAAMC,QAAQ,GAAG,MAAMZ,QAAQ,CAACY,QAAQ,CAACF,CAAC,CAACC,OAAO,CAAC;IACnDtB,OAAO,CAACC,GAAG,CAACsB,QAAQ,CAAC;IACrB,IAAIC,IAAI,GAAG,MAAM5B,KAAK,CAAC6B,GAAG,CAACF,QAAQ,CAAC;IACpCC,IAAI,GAAGA,IAAI,CAACE,IAAI;IAEhB,IAAIC,KAAK,GAAGzB,MAAM,CAAC0B,KAAK,CAACC,WAAW,CAACR,CAAC,CAACM,KAAK,CAACG,QAAQ,EAAE,EAAE,OAAO,CAAC;IACjE,IAAIC,IAAI,GAAG;MACTJ,KAAK;MACLL,OAAO,EAAED,CAAC,CAACC,OAAO,CAACU,QAAQ,EAAE;MAC7BC,MAAM,EAAEZ,CAAC,CAACY,MAAM;MAChBC,KAAK,EAAEb,CAAC,CAACa,KAAK;MACdC,KAAK,EAAEX,IAAI,CAACW,KAAK;MACjBC,IAAI,EAAEZ,IAAI,CAACY,IAAI;MACfC,WAAW,EAAEb,IAAI,CAACa;IACpB,CAAC;IACD,OAAON,IAAI;EACb,CAAC,CAAC,CACH;AAQP;AAEAhC,GAAG,EAAE;AACL,eAAe,SAASuC,IAAIA,CAAEC,KAAK,EAAE;EACrC,oBACIzC,OAAA;IAAK0C,KAAK,EAAE;MAAC,WAAW,EAAC;IAAO;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAC5B;AAEV;AAACC,EAAA,GALuBP,IAAI;AAAA,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}