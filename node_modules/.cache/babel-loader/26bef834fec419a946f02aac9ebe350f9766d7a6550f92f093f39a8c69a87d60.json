{"ast":null,"code":"var _jsxFileName = \"/home/oc/Desktop/NFT Marketplace/NFT_MARKETPLACE_ALCHEMY/RTW3-Week7-NFT-Marketplace/src/components/test.js\";\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function asb() {\n  // const ethers = require(\"ethers\");\n  // //After adding your Hardhat network to your metamask, this code will get providers and signers\n  // const provider = new ethers.providers.Web3Provider(window.ethereum);\n  // const signer = provider.getSigner();\n  // const addr = await signer.getAddress();\n  // console.log(\"add:\"+addr);\n  // console.log(\"fff\");\n\n  const ethers = require(\"ethers\");\n  //After adding your Hardhat network to your metamask, this code will get providers and signers\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  // const signer = provider.getSigner();\n  // //Pull the deployed contract instance\n  // let contract = new ethers.Contract(\n  //   MarketplaceJSON.address,\n  //   MarketplaceJSON.abi,\n  //   signer\n  // );\n\n  // let transaction = await contract.getAllNFTs();\n\n  // const items = await Promise.all(\n  //   transaction.map(async (i) => {\n  //     console.log(i.tokenId);\n  //     const tokenURI = await contract.tokenURI(i.tokenId);\n  //     console.log(tokenURI);\n  //     let meta = await axios.get(tokenURI);\n  //     meta = meta.data;\n\n  //     let price = ethers.utils.formatUnits(i.price.toString(), \"ether\");\n  //     let item = {\n  //       price,\n  //       tokenId: i.tokenId.toNumber(),\n  //       seller: i.seller,\n  //       owner: i.owner,\n  //       image: meta.image,\n  //       name: meta.name,\n  //       description: meta.description,\n  //     };\n  //     return item;\n  //   })\n  // );\n}\n\nasb();\nexport default function Test(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      minHeight: \"100vh\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 10\n  }, this);\n}\n_c = Test;\nvar _c;\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"names":["MarketplaceJSON","axios","jsxDEV","_jsxDEV","asb","ethers","require","provider","providers","Web3Provider","window","ethereum","Test","props","style","minHeight","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/oc/Desktop/NFT Marketplace/NFT_MARKETPLACE_ALCHEMY/RTW3-Week7-NFT-Marketplace/src/components/test.js"],"sourcesContent":["import MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nasync function asb() {\n  // const ethers = require(\"ethers\");\n  // //After adding your Hardhat network to your metamask, this code will get providers and signers\n  // const provider = new ethers.providers.Web3Provider(window.ethereum);\n  // const signer = provider.getSigner();\n  // const addr = await signer.getAddress();\n  // console.log(\"add:\"+addr);\n  // console.log(\"fff\");\n\n  const ethers = require(\"ethers\");\n  //After adding your Hardhat network to your metamask, this code will get providers and signers\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  // const signer = provider.getSigner();\n  // //Pull the deployed contract instance\n  // let contract = new ethers.Contract(\n  //   MarketplaceJSON.address,\n  //   MarketplaceJSON.abi,\n  //   signer\n  // );\n\n  // let transaction = await contract.getAllNFTs();\n\n  // const items = await Promise.all(\n  //   transaction.map(async (i) => {\n  //     console.log(i.tokenId);\n  //     const tokenURI = await contract.tokenURI(i.tokenId);\n  //     console.log(tokenURI);\n  //     let meta = await axios.get(tokenURI);\n  //     meta = meta.data;\n\n  //     let price = ethers.utils.formatUnits(i.price.toString(), \"ether\");\n  //     let item = {\n  //       price,\n  //       tokenId: i.tokenId.toNumber(),\n  //       seller: i.seller,\n  //       owner: i.owner,\n  //       image: meta.image,\n  //       name: meta.name,\n  //       description: meta.description,\n  //     };\n  //     return item;\n  //   })\n  // );\n}\n\nasb();\nexport default function Test(props) {\n  return <div style={{ minHeight: \"100vh\" }}></div>;\n}\n"],"mappings":";AAAA,OAAOA,eAAe,MAAM,qBAAqB;AACjD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC1B,eAAeC,GAAGA,CAAA,EAAG;EACnB;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;EAChC;EACA,MAAMC,QAAQ,GAAG,IAAIF,MAAM,CAACG,SAAS,CAACC,YAAY,CAACC,MAAM,CAACC,QAAQ,CAAC;EACnE;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF;;AAEAP,GAAG,EAAE;AACL,eAAe,SAASQ,IAAIA,CAACC,KAAK,EAAE;EAClC,oBAAOV,OAAA;IAAKW,KAAK,EAAE;MAAEC,SAAS,EAAE;IAAQ;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAO;AACnD;AAACC,EAAA,GAFuBR,IAAI;AAAA,IAAAQ,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}