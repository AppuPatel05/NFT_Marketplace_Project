{"ast":null,"code":"var _jsxFileName = \"/home/oc/Desktop/NFT Marketplace/NFT_MARKETPLACE_ALCHEMY/RTW3-Week7-NFT-Marketplace/src/components/Marketplace.js\",\n  _s = $RefreshSig$();\nimport Navbar from \"./Navbar\";\nimport NFTTile from \"./NFTTile\";\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Marketplace() {\n  _s();\n  const sampleData = [{\n    name: \"NFT#3\",\n    description: \"Alchemy's Third NFT\",\n    website: \"http://axieinfinity.io\",\n    image: \"https://gateway.pinata.cloud/ipfs/QmTsRJX7r5gyubjkdmzFrKQhHv74p5wT9LdeF1m3RTqrE5\",\n    price: \"0.03ETH\",\n    currentlySelling: \"True\",\n    address: \"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\"\n  }];\n  const [data, updateData] = useState(sampleData);\n  const [dataFetched, updateFetched] = useState(false);\n  async function getAllNFTs() {\n    // ---start--: these lines of code will connect the wallet and return the public address.\n    const ethers = require(\"ethers\");\n    //After adding your Hardhat network to your metamask, this code will get providers and signers\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    //Pull the deployed contract instance\n    let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer);\n\n    //create an NFT Token\n    let transaction = await contract.getAllNFTs();\n\n    //Fetch all the details of every NFT from the contract and display\n    const items = await Promise.all(transaction.map(async i => {\n      const tokenURI = await contract.tokenURI(i.tokenId);\n      let meta = await axios.get(tokenURI);\n      meta = meta.data;\n      let price = ethers.utils.formatUnits(i.price.toString(), \"ether\");\n      let item = {\n        price,\n        tokenId: i.tokenId.toNumber(),\n        seller: i.seller,\n        owner: i.owner,\n        image: meta.image,\n        name: meta.name,\n        description: meta.description\n      };\n      return item;\n    }));\n    updateFetched(true);\n    updateData(items);\n  }\n  if (!dataFetched) getAllNFTs();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col place-items-center mt-20\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"md:text-xl font-bold text-white\",\n        children: \"Top NFTs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex mt-5 justify-between flex-wrap max-w-screen-xl text-center\",\n        children: data.map((value, index) => {\n          return /*#__PURE__*/_jsxDEV(NFTTile, {\n            data: value\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 20\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(Marketplace, \"eoOZIC3fpxTnVeH+5XYnEv0RFm0=\");\n_c = Marketplace;\nvar _c;\n$RefreshReg$(_c, \"Marketplace\");","map":{"version":3,"names":["Navbar","NFTTile","MarketplaceJSON","axios","useState","jsxDEV","_jsxDEV","Marketplace","_s","sampleData","name","description","website","image","price","currentlySelling","address","data","updateData","dataFetched","updateFetched","getAllNFTs","ethers","require","provider","providers","Web3Provider","window","ethereum","signer","getSigner","contract","Contract","abi","transaction","items","Promise","all","map","i","tokenURI","tokenId","meta","get","utils","formatUnits","toString","item","toNumber","seller","owner","children","fileName","_jsxFileName","lineNumber","columnNumber","className","value","index","_c","$RefreshReg$"],"sources":["/home/oc/Desktop/NFT Marketplace/NFT_MARKETPLACE_ALCHEMY/RTW3-Week7-NFT-Marketplace/src/components/Marketplace.js"],"sourcesContent":["import Navbar from \"./Navbar\";\nimport NFTTile from \"./NFTTile\";\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\n\nexport default function Marketplace() {\n  const sampleData = [\n    {\n      name: \"NFT#3\",\n      description: \"Alchemy's Third NFT\",\n      website: \"http://axieinfinity.io\",\n      image:\n        \"https://gateway.pinata.cloud/ipfs/QmTsRJX7r5gyubjkdmzFrKQhHv74p5wT9LdeF1m3RTqrE5\",\n      price: \"0.03ETH\",\n      currentlySelling: \"True\",\n      address: \"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\",\n    },\n  ];\n\n  const [data, updateData] = useState(sampleData);\n  const [dataFetched, updateFetched] = useState(false);\n\n  async function getAllNFTs() {\n    // ---start--: these lines of code will connect the wallet and return the public address.\n    const ethers = require(\"ethers\");\n    //After adding your Hardhat network to your metamask, this code will get providers and signers\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    //Pull the deployed contract instance\n    let contract = new ethers.Contract(\n      MarketplaceJSON.address,\n      MarketplaceJSON.abi,\n      signer\n    );\n\n    //create an NFT Token\n    let transaction = await contract.getAllNFTs();\n\n    //Fetch all the details of every NFT from the contract and display\n    const items = await Promise.all(\n      transaction.map(async (i) => {\n        const tokenURI = await contract.tokenURI(i.tokenId);\n        let meta = await axios.get(tokenURI);\n        meta = meta.data;\n\n        let price = ethers.utils.formatUnits(i.price.toString(), \"ether\");\n        let item = {\n          price,\n          tokenId: i.tokenId.toNumber(),\n          seller: i.seller,\n          owner: i.owner,\n          image: meta.image,\n          name: meta.name,\n          description: meta.description,\n        };\n        return item;\n      })\n    );\n\n    updateFetched(true);\n    updateData(items);\n  }\n\n  if (!dataFetched) getAllNFTs();\n\n  return (\n    <div>\n      <Navbar></Navbar>\n      <div className=\"flex flex-col place-items-center mt-20\">\n        <div className=\"md:text-xl font-bold text-white\">Top NFTs</div>\n        <div className=\"flex mt-5 justify-between flex-wrap max-w-screen-xl text-center\">\n          {data.map((value, index) => {\n            return <NFTTile data={value} key={index}></NFTTile>;\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}