{"ast":null,"code":"var _jsxFileName = \"/home/oc/Desktop/NFT Marketplace/NFT_MARKETPLACE_ALCHEMY/RTW3-Week7-NFT-Marketplace/src/components/test.js\";\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function asb() {\n  // const ethers = require(\"ethers\");\n  // //After adding your Hardhat network to your metamask, this code will get providers and signers\n  // const provider = new ethers.providers.Web3Provider(window.ethereum);\n  // const signer = provider.getSigner();\n  // const addr = await signer.getAddress();\n  // console.log(\"add:\"+addr);\n  // console.log(\"fff\");\n\n  const ethers = require(\"ethers\");\n  //After adding your Hardhat network to your metamask, this code will get providers and signers\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  //Pull the deployed contract instance\n  let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer);\n  let transaction = await contract.getAllNFTs();\n  const items = await Promise.all(transaction.map(async i => {\n    //   console.log(i.tokenId);\n    const tokenURI = await contract.tokenURI(i.tokenId);\n    console.log(tokenURI);\n    let meta = await axios.get(tokenURI);\n    meta = meta.data;\n    let price = ethers.utils.formatUnits(i.price.toString(), \"ether\");\n    let item = {\n      price,\n      tokenId: i.tokenId.toNumber(),\n      seller: i.seller,\n      owner: i.owner,\n      image: meta.image,\n      name: meta.name,\n      description: meta.description\n    };\n    return item;\n  }));\n}\nasb();\nexport default function Test(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      minHeight: \"100vh\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 10\n  }, this);\n}\n_c = Test;\nvar _c;\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"names":["MarketplaceJSON","axios","jsxDEV","_jsxDEV","asb","ethers","require","provider","providers","Web3Provider","window","ethereum","signer","getSigner","contract","Contract","address","abi","transaction","getAllNFTs","items","Promise","all","map","i","tokenURI","tokenId","console","log","meta","get","data","price","utils","formatUnits","toString","item","toNumber","seller","owner","image","name","description","Test","props","style","minHeight","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/oc/Desktop/NFT Marketplace/NFT_MARKETPLACE_ALCHEMY/RTW3-Week7-NFT-Marketplace/src/components/test.js"],"sourcesContent":["import MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nasync function asb() {\n  // const ethers = require(\"ethers\");\n  // //After adding your Hardhat network to your metamask, this code will get providers and signers\n  // const provider = new ethers.providers.Web3Provider(window.ethereum);\n  // const signer = provider.getSigner();\n  // const addr = await signer.getAddress();\n  // console.log(\"add:\"+addr);\n  // console.log(\"fff\");\n\n  const ethers = require(\"ethers\");\n  //After adding your Hardhat network to your metamask, this code will get providers and signers\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  //Pull the deployed contract instance\n  let contract = new ethers.Contract(\n    MarketplaceJSON.address,\n    MarketplaceJSON.abi,\n    signer\n  );\n\n  let transaction = await contract.getAllNFTs();\n\n  const items = await Promise.all(\n    transaction.map(async (i) => {\n    //   console.log(i.tokenId);\n      const tokenURI = await contract.tokenURI(i.tokenId);\n      console.log(tokenURI);\n      let meta = await axios.get(tokenURI);\n      meta = meta.data;\n\n      let price = ethers.utils.formatUnits(i.price.toString(), \"ether\");\n      let item = {\n        price,\n        tokenId: i.tokenId.toNumber(),\n        seller: i.seller,\n        owner: i.owner,\n        image: meta.image,\n        name: meta.name,\n        description: meta.description,\n      };\n      return item;\n    })\n  );\n}\n\nasb();\nexport default function Test(props) {\n  return <div style={{ minHeight: \"100vh\" }}></div>;\n}\n"],"mappings":";AAAA,OAAOA,eAAe,MAAM,qBAAqB;AACjD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC1B,eAAeC,GAAGA,CAAA,EAAG;EACnB;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;EAChC;EACA,MAAMC,QAAQ,GAAG,IAAIF,MAAM,CAACG,SAAS,CAACC,YAAY,CAACC,MAAM,CAACC,QAAQ,CAAC;EACnE,MAAMC,MAAM,GAAGL,QAAQ,CAACM,SAAS,EAAE;EACnC;EACA,IAAIC,QAAQ,GAAG,IAAIT,MAAM,CAACU,QAAQ,CAChCf,eAAe,CAACgB,OAAO,EACvBhB,eAAe,CAACiB,GAAG,EACnBL,MAAM,CACP;EAED,IAAIM,WAAW,GAAG,MAAMJ,QAAQ,CAACK,UAAU,EAAE;EAE7C,MAAMC,KAAK,GAAG,MAAMC,OAAO,CAACC,GAAG,CAC7BJ,WAAW,CAACK,GAAG,CAAC,MAAOC,CAAC,IAAK;IAC7B;IACE,MAAMC,QAAQ,GAAG,MAAMX,QAAQ,CAACW,QAAQ,CAACD,CAAC,CAACE,OAAO,CAAC;IACnDC,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;IACrB,IAAII,IAAI,GAAG,MAAM5B,KAAK,CAAC6B,GAAG,CAACL,QAAQ,CAAC;IACpCI,IAAI,GAAGA,IAAI,CAACE,IAAI;IAEhB,IAAIC,KAAK,GAAG3B,MAAM,CAAC4B,KAAK,CAACC,WAAW,CAACV,CAAC,CAACQ,KAAK,CAACG,QAAQ,EAAE,EAAE,OAAO,CAAC;IACjE,IAAIC,IAAI,GAAG;MACTJ,KAAK;MACLN,OAAO,EAAEF,CAAC,CAACE,OAAO,CAACW,QAAQ,EAAE;MAC7BC,MAAM,EAAEd,CAAC,CAACc,MAAM;MAChBC,KAAK,EAAEf,CAAC,CAACe,KAAK;MACdC,KAAK,EAAEX,IAAI,CAACW,KAAK;MACjBC,IAAI,EAAEZ,IAAI,CAACY,IAAI;MACfC,WAAW,EAAEb,IAAI,CAACa;IACpB,CAAC;IACD,OAAON,IAAI;EACb,CAAC,CAAC,CACH;AACH;AAEAhC,GAAG,EAAE;AACL,eAAe,SAASuC,IAAIA,CAACC,KAAK,EAAE;EAClC,oBAAOzC,OAAA;IAAK0C,KAAK,EAAE;MAAEC,SAAS,EAAE;IAAQ;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAO;AACnD;AAACC,EAAA,GAFuBR,IAAI;AAAA,IAAAQ,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}