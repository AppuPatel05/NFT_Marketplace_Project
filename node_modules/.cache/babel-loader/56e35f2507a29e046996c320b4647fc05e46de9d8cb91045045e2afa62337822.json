{"ast":null,"code":"var _jsxFileName = \"/home/oc/Desktop/NFT Marketplace/NFT_MARKETPLACE_ALCHEMY/RTW3-Week7-NFT-Marketplace/src/components/test.js\";\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function asb() {\n  // const ethers = require(\"ethers\");\n  // //After adding your Hardhat network to your metamask, this code will get providers and signers\n  // const provider = new ethers.providers.Web3Provider(window.ethereum);\n  // const signer = provider.getSigner();\n  // const addr = await signer.getAddress();\n  // console.log(\"add:\"+addr);   \n  // console.log(\"fff\");\n\n  const ethers = require(\"ethers\");\n  //After adding your Hardhat network to your metamask, this code will get providers and signers\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  //Pull the deployed contract instance\n  let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer);\n  console.log(contract);\n}\nasb();\nexport default function Test(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      \"min-height\": \"100vh\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n_c = Test;\nvar _c;\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"names":["MarketplaceJSON","jsxDEV","_jsxDEV","asb","ethers","require","provider","providers","Web3Provider","window","ethereum","signer","getSigner","contract","Contract","address","abi","console","log","Test","props","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/oc/Desktop/NFT Marketplace/NFT_MARKETPLACE_ALCHEMY/RTW3-Week7-NFT-Marketplace/src/components/test.js"],"sourcesContent":["import MarketplaceJSON from \"../Marketplace.json\";\nasync function asb(){\n    // const ethers = require(\"ethers\");\n    // //After adding your Hardhat network to your metamask, this code will get providers and signers\n    // const provider = new ethers.providers.Web3Provider(window.ethereum);\n    // const signer = provider.getSigner();\n    // const addr = await signer.getAddress();\n    // console.log(\"add:\"+addr);   \n    // console.log(\"fff\");\n\n    const ethers = require(\"ethers\");\n    //After adding your Hardhat network to your metamask, this code will get providers and signers\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    //Pull the deployed contract instance\n    let contract = new ethers.Contract(\n      MarketplaceJSON.address,\n      MarketplaceJSON.abi,\n      signer\n    );\n\n    console.log(contract);\n\n}\n\nasb();\nexport default function Test (props) {\nreturn(\n    <div style={{\"min-height\":\"100vh\"}}>\n    </div>\n)\n}"],"mappings":";AAAA,OAAOA,eAAe,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAClD,eAAeC,GAAGA,CAAA,EAAE;EAChB;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;EAChC;EACA,MAAMC,QAAQ,GAAG,IAAIF,MAAM,CAACG,SAAS,CAACC,YAAY,CAACC,MAAM,CAACC,QAAQ,CAAC;EACnE,MAAMC,MAAM,GAAGL,QAAQ,CAACM,SAAS,EAAE;EACnC;EACA,IAAIC,QAAQ,GAAG,IAAIT,MAAM,CAACU,QAAQ,CAChCd,eAAe,CAACe,OAAO,EACvBf,eAAe,CAACgB,GAAG,EACnBL,MAAM,CACP;EAEDM,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAC;AAEzB;AAEAV,GAAG,EAAE;AACL,eAAe,SAASgB,IAAIA,CAAEC,KAAK,EAAE;EACrC,oBACIlB,OAAA;IAAKmB,KAAK,EAAE;MAAC,YAAY,EAAC;IAAO;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAC7B;AAEV;AAACC,EAAA,GALuBP,IAAI;AAAA,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}